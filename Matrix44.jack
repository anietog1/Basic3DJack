class Matrix44 {
    /* Fields; this is a matrix of 16 floats. */
    field Array matrix;

    /* Global variables. */
    static Matrix44 ZERO_MAT;
    static Matrix44 IDENTITY_MAT;

    /* Used for operations. */
    static Vector3 temp;
    static Matrix44 result;

    function void init() {
        var Array tempArray;
        var Float tempFloat;
        var int i;

        let ZERO_MAT = Matrix44.new();
        let IDENTITY_MAT = Matrix44.new();
        let tempArray = IDENTITY_MAT.getMatrix();

        let i = 0;
        while(i < 4) {
            let tempArray[i * 4]1;
            let i = i + 1;
        }

        let tempArray = Vector3.new();
        let result = Matrix44.new();
        return;
    }

    constructor Matrix44 new() {
        var int i, j;

        let matrix = Array.new(4);

        let i = 0;
        while(i < 4) {
            let matrix[i] = Array.new(4);

            let j = 0;
            while(j < 4) {
                let matrix[i][j] = Float.new();
                let j = j + 1;
            }

            let i = i + 1;
        }
    }

    method void setInt(int i, int j, int val) {
        var Float temp;
        let temp = matrix[(i * 4) + j];
        do temp.setInt(val);
        return;
    }

    method void set(int i, int j, Float val) {
        var Float temp;
        let temp = matrix[(i * 4) + j];
        do temp.set(val);
        return;
    }

    function Matrix44 zero() {
        return ZERO_MAT;
    }

    function Matrix44 identity() {
        return IDENTITY_MAT;
    }

    method Matrix44 add(Matrix44 m) {
        Matrix44 result = Matrix44.zero();

        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                result.matrix[i][j] = matrix[i][j] + m.matrix[i][j];
            }
        }

        return this;
    }

    function Vector3 times(Vector3 p) {
        double x = matrix[0][0] * p.x + matrix[0][1] * p.y + matrix[0][2] * p.z + matrix[0][3];
        double y = matrix[1][0] * p.x + matrix[1][1] * p.y + matrix[1][2] * p.z + matrix[1][3];
        double z = matrix[2][0] * p.x + matrix[2][1] * p.y + matrix[2][2] * p.z + matrix[2][3];
        double w = matrix[3][0] * p.x + matrix[3][1] * p.y + matrix[3][2] * p.z + matrix[3][3];

        return new Vector3(x, y, z, w);
    }

    method Matrix44 mult(Matrix44 m) {
        Matrix44 result = Matrix44.zero();

        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                for (int k = 0; k < 4; ++k) {
                    result.matrix[i][j] += matrix[i][k] * m.matrix[k][j];
                }
            }
        }

        return this;
    }

    method Matrix44 times(double n) {
        Matrix44 result = Matrix44.zero();

        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                result.matrix[i][j] = matrix[i][j] * n;
            }
        }

        return result;
    }

    function Matrix44 translate(double dx, double dy, double dz) {
        double matrix[][] = {
            {1, 0, 0, dx},
            {0, 1, 0, dy},
            {0, 0, 1, dz},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 scale(double sx, double sy, double sz) {
        double matrix[][] = {
            {sx, 0, 0, 0},
            {0, sy, 0, 0},
            {0, 0, sz, 0},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 rotateX(double dtheta) {
        double matrix[][] = {
            {1, 0, 0, 0},
            {0, Math.cos(dtheta), -Math.sin(dtheta), 0},
            {0, Math.sin(dtheta), Math.cos(dtheta), 0},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 rotateY(double dtheta) {
        double matrix[][] = {
            {Math.cos(dtheta), 0, Math.sin(dtheta), 0},
            {0, 1, 0, 0},
            {-Math.sin(dtheta), 0, Math.cos(dtheta), 0},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 rotateZ(double dtheta) {
        double matrix[][] = {
            {Math.cos(dtheta), -Math.sin(dtheta), 0, 0},
            {Math.sin(dtheta), Math.cos(dtheta), 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 perspective(double d) {
        double matrix[][] = {
            {1, 0, 0, 0},
            {0, 1, 0, 0},
            {0, 0, 1, 0},
            {0, 0, 1 / d, 0}
        };

        return new Matrix44(matrix);
    }

    function Matrix44 lookAt(Vector3 from, Vector3 to, Vector3 orientation) {
        Vector3 n = from.plus(to.times(-1)).normalized();
        Vector3 u = orientation.cross(n).normalized();
        Vector3 v = n.cross(u);

        double matrix[][] = {
            {u.x, u.y, u.z, -u.dot(from)},
            {v.x, v.y, v.z, -v.dot(from)},
            {n.x, n.y, n.z, -n.dot(from)},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    /*
     * Returns a string with a representation of this matrix ((a00,a01,a02,a03),...,(a30,a31,a32,a33)).
     */
    method String toString() {
        var String str, tempString;
        var Float tempFloat;
        var int i, j;

        let str = String.new(246); /* (14 * 4 + 3 + 2) * 4 + 2 */
        do str.appendChar(40); /* ( */

        let i = 0;
        while(i < 4) {
            do str.appendChar(40); /* ( */
            
            let j = 0;
            while(j < 4) {
                let tempFloat = (matrix[i])[j];
                let tempString = tempFloat.toString(4);
                do Util.appendString(str, tempString);
                do tempString.dispose();

                if(j < 3) {
                    do str.appendChar(44); /* , */
                }

                let j = j + 1;
            }

            do str.appendChar(41); /* ) */
        }

        do str.appendChar(41); /* ) */
        return str;
    }

    /*
     * Prints this matrix.
     */
    method void print() {
        var String s;
        let s = toString();
        do Output.printString(s);
        do s.dispose();
        return;
    }
}