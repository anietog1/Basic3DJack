/*
 * Matrix44 class.
 */
class Matrix44 {
    /* Fields; this is a matrix of 16 floats. */
    field Array matrix;

    /* Global variables. */
    static Matrix44 ZERO_MAT;
    static Matrix44 IDENTITY_MAT;
    static Vector3 resultVec;
    static Matrix44 resultMat;

    /* Used for operations. */
    static Float tempAddSub;
    static Float tempMultDiv;
    static Float tempRads;

    /*
     * Initializes this class.
     */
    function void init() {
        let ZERO_MAT = Matrix44.new();
        let IDENTITY_MAT = Matrix44.new();
        do IDENTITY_MAT.get(0, 0).setInt(1);
        do IDENTITY_MAT.get(1, 1).setInt(1);
        do IDENTITY_MAT.get(2, 2).setInt(1);
        do IDENTITY_MAT.get(3, 3).setInt(1);
        let resultVec = Vector3.new();
        let resultMat = Matrix44.new();
        return;
    }

    /*
     * Creates a new matrix.
     */
    constructor Matrix44 new() {
        var int i;
        let matrix = Array.new(16);

        let i = 0;
        while(i < 16) {
            let matrix[i] = Float.new();
            let i = i + 1;
        }

        return this;
    }

    /*
     * Copies the contents of another matrix.
     */
    method Matrix44 copy(Matrix44 m) {
        var int i, j;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                do get(i, j).set(m.get(i, j));
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Gets the element at the given indexes (i, j).
     * Notice it can be modified.
     */
    method Float get(int i, int j) {
        return matrix[(i * 4) + j];
    }

    /*
     * Returns the matrix ((0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)).
     */
    function Matrix44 zero() {
        return ZERO_MAT;
    }

    /*
     * Returns the matrix ((1,0,0,0),(0,1,0,0),(0,0,1,0),(0,0,0,1)).
     */
    function Matrix44 identity() {
        return IDENTITY_MAT;
    }

    /*
     * Adds the matrix m into this matrix.
     */
    method Matrix44 add(Matrix44 m) {
        var int i, j;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                do get(i, j).add(m.get(i, j));
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Returns the result of multiplying matrix m and vector p.
     * m x p
     * WARNING: Global variable returned.
     */
    function Vector3 times(Matrix44 m, Vector3 p) {
        do tempMultDiv.set(m.get(0, 0));
        do tempMultDiv.mult(p.getX());
        do tempAddSub.set(tempMultDiv);
        do tempMultDiv.set(m.get(0, 1));
        do tempMultDiv.mult(p.getX());
        do tempAddSub.add(tempMultDiv);
        do tempMultDiv.set(m.get(0, 2));
        do tempMultDiv.mult(p.getX());
        do tempAddSub.add(tempMultDiv);
        do tempMultDiv.set(m.get(0, 3));
        do tempMultDiv.mult(p.getX());
        do tempAddSub.add(tempMultDiv);

        x = matrix[0][0] * p.x + matrix[0][1] * p.y + matrix[0][2] * p.z + matrix[0][3];
        double y = matrix[1][0] * p.x + matrix[1][1] * p.y + matrix[1][2] * p.z + matrix[1][3];
        double z = matrix[2][0] * p.x + matrix[2][1] * p.y + matrix[2][2] * p.z + matrix[2][3];
        double w = matrix[3][0] * p.x + matrix[3][1] * p.y + matrix[3][2] * p.z + matrix[3][3];

        return new Vector3(x, y, z, w);
    }

    /*
     * Multiplies with matrix m and returns itself.
     */
    method Matrix44 mult(Matrix44 m) {
        Matrix44 result = Matrix44.zero();

        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                for (int k = 0; k < 4; ++k) {
                    result.matrix[i][j] += matrix[i][k] * m.matrix[k][j];
                }
            }
        }

        return this;
    }

    /*
     * Multiplies all the elements of this matrix by n.
     */
    method Matrix44 multInt(int n) {
        var int i, j;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                do get(i, j).multInt(n);
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Multiplies all the elements of this matrix by n.
     */
    method Matrix44 multFloat(Float n) {
        var int i, j;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                do get(i, j).mult(n);
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Translation matrix.
     */
    function Matrix44 translateInt(int dx, int dy, int dz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 3).setInt(dx);
        do resultMat.get(1, 3).setInt(dy);
        do resultMat.get(2, 3).setInt(dz);
        return resultMat;
    }

    /*
     * Translation matrix.
     */
    function Matrix44 translate(Float dx, Float dy, Float dz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 3).set(dx);
        do resultMat.get(1, 3).set(dy);
        do resultMat.get(2, 3).set(dz);
        return resultMat;
    }

    /*
     * Scaling matrix.
     */
    function Matrix44 scaleInt(int sx, int sy, int sz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).setInt(sx);
        do resultMat.get(1, 1).setInt(sy);
        do resultMat.get(2, 2).setInt(sz);
        return resultMat;
    }

    /*
     * Scaling matrix.
     */
    function Matrix44 scale(Float sx, Float sy, Float sz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).set(sx);
        do resultMat.get(1, 1).set(sy);
        do resultMat.get(2, 2).set(sz);
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateX(Float dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(1, 1).set(Trig.cos(dtheta));
        do resultMat.get(1, 2).set(Trig.lastSin()).neg();
        do resultMat.get(2, 1).set(Trig.lastSin());
        do resultMat.get(2, 2).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateXDegrees(int dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(1, 1).set(Trig.cos(Trig.rad(tempRads.setInt(dtheta))));
        do resultMat.get(1, 2).set(Trig.lastSin()).neg();
        do resultMat.get(2, 1).set(Trig.lastSin());
        do resultMat.get(2, 2).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateY(Float dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).set(Trig.cos(dtheta));
        do resultMat.get(0, 2).set(Trig.lastSin());
        do resultMat.get(2, 0).set(Trig.lastSin()).neg();
        do resultMat.get(2, 2).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateYDegrees(int dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).set(Trig.cos(Trig.rad(tempRads.setInt(dtheta))));
        do resultMat.get(0, 2).set(Trig.lastSin());
        do resultMat.get(2, 0).set(Trig.lastSin()).neg();
        do resultMat.get(2, 2).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateZ(Float dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).set(Trig.cos(dtheta));
        do resultMat.get(0, 1).set(Trig.lastSin()).neg();
        do resultMat.get(1, 0).set(Trig.lastSin());
        do resultMat.get(1, 1).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     */
    function Matrix44 rotateZDegrees(int dtheta) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(0, 0).set(Trig.cos(Trig.rad(tempRads.setInt(dtheta))));
        do resultMat.get(0, 1).set(Trig.lastSin()).neg();
        do resultMat.get(1, 0).set(Trig.lastSin());
        do resultMat.get(1, 1).set(Trig.lastCos());
        return resultMat;
    }

    /*
     * Perspective matrix.
     */
    function Matrix44 perspectiveInt(int d) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(3, 3).setInt(0);
        do resultMat.get(3, 2).setInt(1).divInt(d);
        return resultMat;
    }

    /*
     * Perspective matrix.
     */
    function Matrix44 perspective(Float d) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.get(3, 3).setInt(0);
        do resultMat.get(3, 2).setInt(1).div(d);
        return resultMat;
    }

    /*
     * Look at matrix.
     */
    function Matrix44 lookAt(Vector3 from, Vector3 to, Vector3 orientation) {
        Vector3 n = from.plus(to.times(-1)).normalized();
        Vector3 u = orientation.cross(n).normalized();
        Vector3 v = n.cross(u);

        double matrix[][] = {
            {u.x, u.y, u.z, -u.dot(from)},
            {v.x, v.y, v.z, -v.dot(from)},
            {n.x, n.y, n.z, -n.dot(from)},
            {0, 0, 0, 1}
        };

        return new Matrix44(matrix);
    }

    /*
     * Returns a string with a representation of this matrix ((a00,a01,a02,a03),...,(a30,a31,a32,a33)).
     */
    method String toString() {
        var String str, tempString;
        var Float tempFloat;
        var int i, j;

        let str = String.new(246); /* (14 * 4 + 3 + 2) * 4 + 2 */
        do str.appendChar(40); /* ( */

        let i = 0;
        while(i < 4) {
            do str.appendChar(40); /* ( */
            
            let j = 0;
            while(j < 4) {
                let tempFloat = (matrix[i])[j];
                let tempString = tempFloat.toString(4);
                do Util.appendString(str, tempString);
                do tempString.dispose();

                if(j < 3) {
                    do str.appendChar(44); /* , */
                }

                let j = j + 1;
            }

            do str.appendChar(41); /* ) */
        }

        do str.appendChar(41); /* ) */
        return str;
    }

    /*
     * Prints this matrix.
     */
    method void print() {
        var String s;
        let s = toString();
        do Output.printString(s);
        do s.dispose();
        return;
    }
}