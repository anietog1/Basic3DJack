/*
 * Matrix44 class.
 */
class Matrix44 {
    /* Fields; this is a matrix of 16 floats. */
    field Array matrix;

    /* Global variables. */
    static Matrix44 ZERO_MAT;
    static Matrix44 IDENTITY_MAT;
    static Vector3 resultVec;
    static Matrix44 resultMat;

    /* Used for operations. */
    static Float tempMultDiv;
    static Float tempRads;

    static Float tempX;
    static Float tempY;
    static Float tempZ;
    static Float tempW;

    static Vector3 tempVec;
    static Vector3 n;
    static Vector3 u;
    static Vector3 v;

    /*
     * Initializes this class.
     */
    function void init() {
        let ZERO_MAT = Matrix44.new();
        let IDENTITY_MAT = Matrix44.new();
        do IDENTITY_MAT.setInt(0, 0, 1);
        do IDENTITY_MAT.setInt(1, 1, 1);
        do IDENTITY_MAT.setInt(2, 2, 1);
        do IDENTITY_MAT.setInt(3, 3, 1);

        let resultVec = Vector3.new();
        let resultMat = Matrix44.new();

        let tempMultDiv = Float.new();
        let tempRads = Float.new();

        let tempX = Float.new();
        let tempY = Float.new();
        let tempZ = Float.new();
        let tempW = Float.new();

        let tempVec = Vector3.new();
        let n = Vector3.new();
        let u = Vector3.new();
        let v = Vector3.new();
        return;
    }

    /*
     * Creates a new matrix.
     */
    constructor Matrix44 new() {
        var int i;
        let matrix = Array.new(16);

        let i = 0;
        while(i < 16) {
            let matrix[i] = Float.new();
            let i = i + 1;
        }

        return this;
    }

    /*
     * Copies the contents of another matrix.
     */
    method Matrix44 copy(Matrix44 m) {
        var int i, j;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                do set(i, j, m.get(i, j));
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Gets the element at the given indexes (i, j).
     * Notice it can be modified.
     */
    method Float get(int i, int j) {
        return matrix[(i * 4) + j];
    }

    /*
     * Set matrix[i][j] = val and returns itself.
     */
    method Matrix44 setInt(int i, int j, int val) {
        var Float refFloat;
        let refFloat = get(i, j);
        do refFloat.setInt(val);
        return this;
    }

    /*
     * Set matrix[i][j] = val and returns itself.
     */
    method Matrix44 set(int i, int j, Float val) {
        var Float refFloat;
        let refFloat = get(i, j);
        do refFloat.set(val);
        return this;
    }

    /*
     * Returns the matrix ((0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)).
     */
    function Matrix44 zero() {
        return ZERO_MAT;
    }

    /*
     * Returns the matrix ((1,0,0,0),(0,1,0,0),(0,0,1,0),(0,0,0,1)).
     */
    function Matrix44 identity() {
        return IDENTITY_MAT;
    }

    /*
     * Adds the matrix m into this matrix.
     */
    method Matrix44 add(Matrix44 m) {
        var int i, j;
        var Float refFloat;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                let refFloat = get(i, j);
                do refFloat.add(m.get(i, j));
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Returns the result of multiplying matrix m and vector p.
     * m x p
     * WARNING: Global variable returned.
     */
    function Vector3 times(Matrix44 m, Vector3 p) {
        /* x = matrix[0][0] * p.x + matrix[0][1] * p.y + matrix[0][2] * p.z + matrix[0][3] */
        do tempMultDiv.set(m.get(0, 0));
        do tempMultDiv.mult(p.getX());
        do tempX.set(tempMultDiv);

        do tempMultDiv.set(m.get(0, 1));
        do tempMultDiv.mult(p.getY());
        do tempX.add(tempMultDiv);

        do tempMultDiv.set(m.get(0, 2));
        do tempMultDiv.mult(p.getZ());
        do tempX.add(tempMultDiv);

        do tempX.add(m.get(0, 3));

        /* y = matrix[1][0] * p.x + matrix[1][1] * p.y + matrix[1][2] * p.z + matrix[1][3] */
        do tempMultDiv.set(m.get(1, 0));
        do tempMultDiv.mult(p.getX());
        do tempY.set(tempMultDiv);

        do tempMultDiv.set(m.get(1, 1));
        do tempMultDiv.mult(p.getY());
        do tempY.add(tempMultDiv);

        do tempMultDiv.set(m.get(1, 2));
        do tempMultDiv.mult(p.getZ());
        do tempY.add(tempMultDiv);

        do tempY.add(m.get(1, 3));

        /* z = matrix[2][0] * p.x + matrix[2][1] * p.y + matrix[2][2] * p.z + matrix[2][3] */
        do tempMultDiv.set(m.get(2, 0));
        do tempMultDiv.mult(p.getX());
        do tempZ.set(tempMultDiv);

        do tempMultDiv.set(m.get(2, 1));
        do tempMultDiv.mult(p.getY());
        do tempZ.add(tempMultDiv);

        do tempMultDiv.set(m.get(2, 2));
        do tempMultDiv.mult(p.getZ());
        do tempZ.add(tempMultDiv);

        do tempZ.add(m.get(2, 3));

        /* w = matrix[3][0] * p.x + matrix[3][1] * p.y + matrix[3][2] * p.z + matrix[3][3] */
        do tempMultDiv.set(m.get(3, 0));
        do tempMultDiv.mult(p.getX());
        do tempW.set(tempMultDiv);

        do tempMultDiv.set(m.get(3, 1));
        do tempMultDiv.mult(p.getY());
        do tempW.add(tempMultDiv);

        do tempMultDiv.set(m.get(3, 2));
        do tempMultDiv.mult(p.getZ());
        do tempW.add(tempMultDiv);

        do tempW.add(m.get(3, 3));

        return resultVec.setFloatW(tempX, tempY, tempZ, tempW);
    }

    /*
     * Multiplies with matrix m and returns itself.
     */
    method Matrix44 mult(Matrix44 m) {
        var int i, j, k;
        var Float refFloat;

        do resultMat.copy(Matrix44.zero());

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                let k = 0;
                while(k < 4) {
                    let refFloat = resultMat.get(i, j);
                    do tempMultDiv.set(get(i, k));
                    do tempMultDiv.mult(m.get(k, j));
                    do refFloat.add(tempMultDiv);
                    let k = k + 1;
                }

                let j = j + 1;
            }

            let i = i + 1;
        }

        do copy(resultMat);
        return this;
    }

    /*
     * Multiplies all the elements of this matrix by n.
     */
    method Matrix44 multInt(int n) {
        var int i, j;
        var Float refFloat;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                let refFloat = get(i, j);
                do refFloat.multInt(n);
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Multiplies all the elements of this matrix by n.
     */
    method Matrix44 multFloat(Float n) {
        var int i, j;
        var Float refFloat;

        let i = 0;
        while(i < 4) {
            let j = 0;
            while(j < 4) {
                let refFloat = get(i, j);
                do refFloat.mult(n);
                let j = j + 1;
            }

            let i = i + 1;
        }

        return this;
    }

    /*
     * Translation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 translateInt(int dx, int dy, int dz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.setInt(0, 3, dx);
        do resultMat.setInt(1, 3, dy);
        do resultMat.setInt(2, 3, dz);
        return resultMat;
    }

    /*
     * Translation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 translate(Float dx, Float dy, Float dz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 3, dx);
        do resultMat.set(1, 3, dy);
        do resultMat.set(2, 3, dz);
        return resultMat;
    }

    /*
     * Scaling matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 scaleInt(int sx, int sy, int sz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.setInt(0, 0, sx);
        do resultMat.setInt(1, 1, sy);
        do resultMat.setInt(2, 2, sz);
        return resultMat;
    }

    /*
     * Scaling matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 scale(Float sx, Float sy, Float sz) {
        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 0, sx);
        do resultMat.set(1, 1, sy);
        do resultMat.set(2, 2, sz);
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateX(Float dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(1, 1, Trig.cos(dtheta));

        let refFloat = resultMat.get(1, 2);
        do temFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(2, 1, Trig.lastSin());
        do resultMat.set(2, 2, Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateXDegrees(int dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(1, 1, Trig.cos(Trig.rad(tempRads.setInt(dtheta))));

        let refFloat = resultMat.get(1, 2);
        do refFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(2, 1, Trig.lastSin());
        do resultMat.set(2, 2, Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateY(Float dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 0, Trig.cos(dtheta));
        do resultMat.set(0, 2, Trig.lastSin());

        let refFloat = resultMat.get(2, 0);
        do refFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(2, 2, Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateYDegrees(int dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 0, Trig.cos(Trig.rad(tempRads.setInt(dtheta))));
        do resultMat.set(0, 2, Trig.lastSin());

        let refFloat = resultMat.get(2, 0);
        do refFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(2, 2, Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateZ(Float dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 0, Trig.cos(dtheta));

        let refFloat = resultMat.get(0, 1);
        do refFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(1, 0, Trig.lastSin());
        do resultMat.set(1, 1, Trig.lastCos());
        return resultMat;
    }

    /*
     * Rotation matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 rotateZDegrees(int dtheta) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.set(0, 0, Trig.cos(Trig.rad(tempRads.setInt(dtheta))));

        let refFloat = resultMat.get(0, 1);
        do refFloat.set(Trig.lastSin());
        do refFloat.neg();

        do resultMat.set(1, 0, Trig.lastSin());
        do resultMat.set(1, 1, Trig.lastCos());
        return resultMat;
    }

    /*
     * Perspective matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 perspectiveInt(int d) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.setInt(3, 3, 0);
        
        let refFloat = resultMat.get(3, 2);
        do refFloat.setInt(1);
        do refFloat.divInt(d);

        return resultMat;
    }

    /*
     * Perspective matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 perspective(Float d) {
        var Float refFloat;

        do resultMat.copy(Matrix44.identity());
        do resultMat.setInt(3, 3, 0);
        
        let refFloat = resultMat.get(3, 2);
        do refFloat.setInt(1);
        do refFloat.div(d);
        
        return resultMat;
    }

    /*
     * Look at matrix.
     * WARNING: Global variable returned.
     */
    function Matrix44 lookAt(Vector3 from, Vector3 to, Vector3 orientation) {
        var Float refFloat;

        do tempVec.copy(to);
        do tempVec.neg();

        do n.copy(from);
        do n.add(tempVec);
        do n.normalize();

        do u.copy(Vector3.cross(orientation, n));
        do u.normalize();

        do v.copy(Vector3.cross(n, u));

        do resultMat.copy(Matrix44.identity());

        do resultMat.set(0, 0, u.getX());
        do resultMat.set(0, 1, u.getY());
        do resultMat.set(0, 2, u.getZ());

        do resultMat.set(1, 0, v.getX());
        do resultMat.set(1, 1, v.getY());
        do resultMat.set(1, 2, v.getZ());

        do resultMat.set(2, 0, n.getX());
        do resultMat.set(2, 1, n.getY());
        do resultMat.set(2, 2, n.getZ());

        let refFloat = Vector3.dot(u, from);
        do refFloat.neg();
        do resultMat.set(3, 0, refFloat);

        let refFloat = Vector3.dot(v, from);
        do refFloat.neg();
        do resultMat.set(3, 1, refFloat);

        let refFloat = Vector3.dot(n, from);
        do refFloat.neg();
        do resultMat.set(3, 2, refFloat);

        return resultMat;
    }

    /*
     * Returns a string with a representation of this matrix ((a00,a01,a02,a03),...,(a30,a31,a32,a33)).
     */
    method String toString() {
        var String str, tempString;
        var Float refFloat;
        var int i, j;

        let str = String.new(249); /* (14 * 4 + 3 + 2) * 4 + 3 + 2 */
        do str.appendChar(40); /* ( */

        let i = 0;
        while(i < 4) {
            do str.appendChar(40); /* ( */
            
            let j = 0;
            while(j < 4) {
                let refFloat = get(i, j);
                let tempString = refFloat.toString(4);
                do Util.appendString(str, tempString);
                do tempString.dispose();

                if(j < 3) {
                    do str.appendChar(44); /* , */
                }

                let j = j + 1;
            }

            do str.appendChar(41); /* ) */

            if(i < 3) {
                do str.appendChar(44); /* , */
            }

            let i = i + 1;
        }

        do str.appendChar(41); /* ) */
        return str;
    }

    /*
     * Prints this matrix.
     */
    method void print() {
        var String s;
        let s = toString();
        do Output.printString(s);
        do s.dispose();
        return;
    }

    method void dispose() {
        var int i;

        let i = 0;
        while(i < 16) {
            do Memory.deAlloc(matrix[i]);
            let i = i + 1;
        }

        do Memory.deAlloc(matrix);
        do Memory.deAlloc(this);
        return;
    }
}