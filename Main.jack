/*
 * Main class. It's an example of how the classes may be used.
 */
class Main 
{
	/*
	 * Main function.
	 */
	function void main()
	{
		do Float.init();
		do Trig.init();
		do Vector3.init();
		do Matrix44.init();
		do Plotter3.init();
		do Main.drawBoat();
		return;
	}

	/*
	 * Draws a simple boat to demonstrate the functionality.
	 * With Q you quit the program.
	 * With A and D you rotate it around the Y axis.
	 * With S and W you rotate it around the X axis.
	 */
	function void drawBoat() {
		var int nPoints, nConns;
		var Array points;
		var Array connsFrom;
		var Array connsTo;

		var Vector3 camPosition, center, camOrientation;
		var int d;

		var int i;

		var Vector3 refVector;
		var Vector3 negCenter;

		var char key;
		var Matrix44 transMat;

		let transMat = Matrix44.new();
		let negCenter = Vector3.new();

		/* Just creating the data. I know where the boat is and where to place the camera ... */
		let nPoints = 9;
		let points = Array.new(nPoints);

		let i = 0;
		while(i < nPoints) {
			let points[i] = Vector3.new();
			let i = i + 1;
		}

		let refVector = points[0];
		do refVector.setInt(100, 100, -1000);
		let refVector = points[1];
		do refVector.setInt(150, 100, -1050);
		let refVector = points[2];
		do refVector.setInt(150, 100, -1100);
		let refVector = points[3];
		do refVector.setInt(50, 100, -1100);
		let refVector = points[4];
		do refVector.setInt(50, 100, -1050);
		let refVector = points[5];
		do refVector.setInt(100, 100, -1050);
		let refVector = points[6];
		do refVector.setInt(100, 400, -1050);
		let refVector = points[7];
		do refVector.setInt(100, 200, -1100);
		let refVector = points[8];
		do refVector.setInt(100, 200, -1050);

		let nConns = 8;

		let connsFrom = Array.new(nConns);
		let connsTo = Array.new(nConns);

		let connsFrom[0] = 0;
		let connsFrom[1] = 1;
		let connsFrom[2] = 2;
		let connsFrom[3] = 3;
		let connsFrom[4] = 4;
		let connsFrom[5] = 5;
		let connsFrom[6] = 6;
		let connsFrom[7] = 7;
		let connsTo[0] = 1;
		let connsTo[1] = 2;
		let connsTo[2] = 3;
		let connsTo[3] = 4;
		let connsTo[4] = 0;
		let connsTo[5] = 6;
		let connsTo[6] = 7;
		let connsTo[7] = 8;

		let camPosition = Vector3.new();
		do camPosition.setInt(100, 250, 0);
		let center = Vector3.new();
		do center.setInt(100, 250, -1050);
		let camOrientation = Vector3.new();
		do camOrientation.copy(Vector3.yVec());
		let d = -500;

		do Plotter3.setCameraPosition(camPosition);
		do Plotter3.setCameraLookTo(center);
		do Plotter3.setCameraOrientation(camOrientation);
		do Plotter3.setDInt(d);

		do negCenter.copy(center);
		do negCenter.neg();

		/* Loop */
		let key = -1;
		while(~(key = 81)) { /* Q */
			let key = Keyboard.keyPressed();
			do transMat.copy(Matrix44.identity());

			/*
			 * Notice if you want to compose transformation A and transformation B you should do B x A and
			 * not A x B, since the library works this way: B x (A x v). The rightmost transformation is the first one.
		     * 
			 * In-place transformations are achieved doing the next movements:
			 * v = v - center
			 * transform(v)
			 * v = v + center
			 */
			if(key = 65) { /* A */
				do transMat.copy(Matrix44.translate(center.getX(), center.getY(), center.getZ()));
				do transMat.mult(Matrix44.rotateYDegrees(-10));
				do transMat.mult(Matrix44.translate(negCenter.getX(), negCenter.getY(), negCenter.getZ()));
			}

			if(key = 68) { /* D */
				do transMat.copy(Matrix44.translate(center.getX(), center.getY(), center.getZ()));
				do transMat.mult(Matrix44.rotateYDegrees(10));
				do transMat.mult(Matrix44.translate(negCenter.getX(), negCenter.getY(), negCenter.getZ()));			
			}

			if(key = 83) { /* S */
				do transMat.copy(Matrix44.translate(center.getX(), center.getY(), center.getZ()));
				do transMat.mult(Matrix44.rotateXDegrees(10));
				do transMat.mult(Matrix44.translate(negCenter.getX(), negCenter.getY(), negCenter.getZ()));			
			}

			if(key = 87) { /* W */
				do transMat.copy(Matrix44.translate(center.getX(), center.getY(), center.getZ()));
				do transMat.mult(Matrix44.rotateXDegrees(-10));
				do transMat.mult(Matrix44.translate(negCenter.getX(), negCenter.getY(), negCenter.getZ()));			
			}

			/* Aplying transformation to all points */
			let i = 0;
			while(i < nPoints) {
				let refVector = points[i];
				do refVector.copy(Matrix44.times(transMat, refVector));
				let i = i + 1;
			}

			/* Displaying on screen. Calling clearScreen creates a tiling effect */
			do Screen.clearScreen();
			do Plotter3.draw(nPoints, points, nConns, connsFrom, connsTo);
		}

		/* Cleanup */

		let i = 0;
		while(i < nPoints) {
			let refVector = points[i];
			do refVector.dispose();
			let i = i + 1;
		}

		do points.dispose();
		do connsFrom.dispose();
		do connsTo.dispose();
		do camPosition.dispose();
		do center.dispose();
		do camOrientation.dispose();
		do transMat.dispose();
		do negCenter.dispose();
		return;
	}
}
